package CCThreads
public
	with HardwareParts;

	with SEI;

	thread ScanInputPorts
		features
			wheel_pulses: in data port;
			brake_pedal_in: in data port;
			actual_velocity: out data port;
			brake_pedal_out: out data port;
		flows
			flow_W_T: flow path wheel_pulses -> actual_velocity;
			flow_B_T: flow path brake_pedal_in -> brake_pedal_out;
		properties
			Dispatch_Protocol => Periodic;
			Period => 5Ms;
			Compute_Execution_Time => 3ms .. 3ms;
	end ScanInputPorts;

	thread ComputeDesiredSpeed
		features
			actual_velocity: in data port;
			output_velocity: out data port;
		flows
			flow_W_T: flow path actual_velocity -> output_velocity;
		properties
			Dispatch_Protocol => Periodic;
			Period => 10Ms;
			Compute_Execution_Time => 2Ms .. 2Ms;
	end ComputeDesiredSpeed;

	thread ComputeThrottleSetting
		features
			output_velocity: in data port;
			brake_pedal: in data port;
			throttle_setting: out data port;
		flows
			flow_W_T: flow path output_velocity -> throttle_setting;
			flow_B_T: flow path brake_pedal -> throttle_setting;
		properties
			Dispatch_Protocol => Periodic;
			Period => 5Ms;
			Compute_Execution_Time => 3Ms .. 3Ms;
	end ComputeThrottleSetting;

	process CruiseControlProcess
		features
			wheel_pulses: in data port;
			brake_pedal: in data port;
			throttle_setting: out data port;
		flows
			Flow_W_T: flow path wheel_pulses -> throttle_setting;
			Flow_B_T: flow path brake_pedal -> throttle_setting;
		properties
--NOTE
			Reference_Processor => classifier (HardwareParts::PowerPC.single);--do not change this to dual, its 1 cycle per instruction, dual will have 2 cycles per instruction.
--NOTE
	end CruiseControlProcess;

	process implementation CruiseControlProcess.impl
		subcomponents
			scan_input_ports: thread ScanInputPorts;
			compute_desired_speed: thread ComputeDesiredSpeed;
			compute_throttle_setting: thread ComputeThrottleSetting;
		connections
			d1: port compute_desired_speed.output_velocity -> compute_throttle_setting.output_velocity {
						Timing => Immediate;
					};
			d2: port scan_input_ports.actual_velocity -> compute_desired_speed.actual_velocity {
						Timing => Immediate;
					};
			d3: port scan_input_ports.brake_pedal_out -> compute_throttle_setting.brake_pedal {
						Timing => Immediate;
					};
			d4: port wheel_pulses -> scan_input_ports.wheel_pulses {
						Timing => Immediate;
					};
			d5: port brake_pedal -> scan_input_ports.brake_pedal_in {
						Timing => Immediate;
					};
			d6: port compute_throttle_setting.throttle_setting -> throttle_setting {
						Timing => Immediate;
					};
		flows
			Flow_W_T: flow path wheel_pulses -> d4 -> scan_input_ports.flow_W_T -> d2 -> compute_desired_speed.flow_W_T -> d1 -> compute_throttle_setting.flow_W_T -> d6 -> throttle_setting;
			Flow_B_T: flow path brake_pedal -> d5 -> scan_input_ports.flow_B_T -> d3 -> compute_throttle_setting.flow_B_T -> d6 -> throttle_setting;
		properties
			SEI::MIPSBudget => 1200.0 MIPS;
	end CruiseControlProcess.impl;
end CCThreads;